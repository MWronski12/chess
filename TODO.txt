CORE:
- How to assure that alphaBeta is properly implemented? 
    - logic
    - move ordering
    - iterative deepening
    - Gotta test some how if it prunes the branches correctly
- quiescenceSearch:
    - Until no check move is available
    - Until no capture move is available
    - then evaluate
- searchForMate:
    - gotta return from the getBestMove as soon as forced mate is found
- timeout functionality in getBestMove

HOW TO SPEEDUP:
- Transposition hashing tables
- getBestMove evaluates every move in a different thread
- get Board::fastCopy to work

REST:
- Insufficient material in evaluation function
- Keep track of game phase (mid or end game)
- evaluateMoves:
    - Operate on Move struct instead of whole MoveContent
    - Reward castling and first move of the piece
    - It also includes pseudo legal moves, which is a problem when trying to see if its staleMate
- TEST TRANSPOSITION TABLE WITH PERFT
-evaluateMoves zmienić nazwę funkcji i dać do review
- do review alfa beta czy to dobrze śmiga itd
- pobrać jakiś działający kod i podpiąć do niego testy żeby mieć taki benchmark 
- inital zobrist keys można dać jako globala a nie że do tablicy
- review czy hashing jest zgodny z tym kodem : https://github.com/maksimKorzh/bbc/blob/master/src/bbc_nnue/bbc.c
- Jak stestować zobring + transpositiontable? czy wystarczą UT?


@@@@@@@@@@@@@@@@@@@@@@@@@@
- Jak zintegrować tabele transpozycji do obecnego rozwiązania?
czy wystarczy to co dałem zakomentowane?
i jak napisać na to sensownego testa? Trzeba chyba sobie na kartce to wszystko rozpisać
@@@@@@@@@@@@@@@@@@@@@@@@@@

1. Ogarnąc testowanie searcha ( np. przykłady z internetu )
2. Wprowadzić transpositiontable i podejmowanie decyzji na podstawie Bazydanych
3. quiescenceSearch
4. Rozwinięcie ewaluacji
5. OPTYMALIZACJA

6. Napisanie bota i przetestowanie


5. Optymalizacja wszystkiego 
